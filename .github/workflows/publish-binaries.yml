name: run tests, build & publish binaries

on:
  push:
    tags:
      - '*'
    # todo: remove
    branches:
      - ci

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-toolchain: ['stable', 'beta']

    steps:
      - uses: actions/checkout@v3
      - name: set up Rust ${{ matrix.rust-toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}
      - name: configure Cargo/rustc caching
        uses: Swatinem/rust-cache@v2

      - name: cargo test
        run: cargo test
      - name: cargo build
        run: cargo build --all-features
  binaries:
    name: build ${{ matrix.target }} binary
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # todo
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          # - os: ubuntu-latest
          #   # todo: there's also x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-gnu
          # - os: ubuntu-latest
          #   target: armv7-unknown-linux-musleabihf
          # - os: ubuntu-latest
          #   target: armv7-linux-androideabi
          # - os: ubuntu-latest
          #   target: aarch64-linux-android
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          # - os: macos-latest
          #   target: aarch64-apple-ios
    steps:
      - uses: actions/checkout@v3
      - name: set up Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: set up Rust target
        run: |
          rustup target add '${{ matrix.target }}'
      - name: configure Cargo/rustc caching
        uses: Swatinem/rust-cache@v2
      - name: build ${{ matrix.target }}
        run: |
          cargo build --release --all-features --target '${{ matrix.target }}'
      - name: store built binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/url_parser_cli
  release:
    name: create GitHub Release, upload binaries
    needs: binaries
    runs-on: ubuntu-latest
    steps:
      - name: download built binaries
        uses: actions/download-artifact@v3
        with:
          path: targets
      - name: rename, move & compress binaries
        id: binaries
        run: |
          mkdir bin
          for target in targets/*; do
            mv "$target/url_parser_cli" "bin/url_parser_cli-$(basename "$target")"
          done
          gzip --keep bin/*
          ls -lh bin
      - name: create release & upload binaries
        uses: softprops/action-gh-release@v1
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ${{ github.ref_name }}
          name: 'chunked-transfer-cli ${{ github.ref_name }}'
          fail_on_unmatched_files: true
          files: 'bin/*'
